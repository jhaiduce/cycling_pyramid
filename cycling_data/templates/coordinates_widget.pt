<tal:def tal:define="title title|field.title;
                     description description|field.description;
                     errormsg errormsg|field.errormsg;
                     item_template item_template|field.widget.item_template"
         i18n:domain="deform">
  
  <div class="panel panel-default" title="${description}">
    <div class="panel-heading">${title}</div>
    <div class="panel-body">

      <div tal:condition="errormsg" 
           class="clearfix alert alert-danger">
        <p i18n:translate="">
           There was a problem with this section
        </p>
        <p>${errormsg}</p>
      </div>

      <div tal:condition="description">
        ${description}
      </div>

      <input id="pac-input" class="controls" type="text" placeholder="Map search" style="width:50%"/>
      <div id="map" style="height:400px;"></div>

      ${field.start_mapping()}
      <div tal:repeat="child field.children"
           tal:replace="structure child.render_template(item_template)" >
      </div>     
      ${field.end_mapping()}

    </div>
  </div>
  
  <script>
              var map;
          function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
              center: {lat: 39.8333333, lng: -98.585522},
              zoom: 3

            });
            
            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);

            $(input).keypress(
            function(event){
                if (event.which == '13') {
                    event.preventDefault();
                }
            });

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
              searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
              var places = searchBox.getPlaces();

              if (places.length == 0) {
                return;
              }

              // Clear out the old markers.
              markers.forEach(function(marker) {
                marker.setMap(null);
              });
              markers = [];

              // For each place, get the icon, name and location.
              var bounds = new google.maps.LatLngBounds();
              places.forEach(function(place) {
                if (!place.geometry) {
                  console.log("Returned place contains no geometry");
                  return;
                }
                var icon = {
                  url: place.icon,
                  size: new google.maps.Size(71, 71),
                  origin: new google.maps.Point(0, 0),
                  anchor: new google.maps.Point(17, 34),
                  scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                  map: map,
                  icon: icon,
                  title: place.name,
                  position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                  // Only geocodes have viewport.
                  bounds.union(place.geometry.viewport);
                } else {
                  bounds.extend(place.geometry.location);
                }
              });
              map.fitBounds(bounds);
            });

            var elevator = new google.maps.ElevationService;

            map.addListener('click', function(e) {
                position=e.latLng
                lat=position.lat()
                lng=position.lng()
                document.getElementById('${field.children[0].oid}').value = lat
                document.getElementById('${field.children[1].oid}').value = lng
                
                elevator.getElevationForLocations(
                    {'locations':[position]},
                    function(results,status) {
                        if(status === 'OK') {
                            if(results[0]) {
                                document.getElementById('${field.children[2].oid}').value = results[0].elevation
                            }
                            else {
                                console.log('No results found');
                            }
                        }
                        console.log('Elevation service failed due to: ' + status);
                    }
                )
            });
          }
        </script>

</tal:def>
